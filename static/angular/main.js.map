{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/coastal-act-projects-detail/coastal-act-projects-detail.component.css","webpack:///./src/app/coastal-act-projects-detail/coastal-act-projects-detail.component.html","webpack:///./src/app/coastal-act-projects-detail/coastal-act-projects-detail.component.ts","webpack:///./src/app/coastal-act-projects/coastal-act-projects.component.css","webpack:///./src/app/coastal-act-projects/coastal-act-projects.component.html","webpack:///./src/app/coastal-act-projects/coastal-act-projects.component.ts","webpack:///./src/app/coastal-act/coastal-act.component.css","webpack:///./src/app/coastal-act/coastal-act.component.html","webpack:///./src/app/coastal-act/coastal-act.component.ts","webpack:///./src/app/covered-data-detail/covered-data-detail.component.css","webpack:///./src/app/covered-data-detail/covered-data-detail.component.html","webpack:///./src/app/covered-data-detail/covered-data-detail.component.ts","webpack:///./src/app/covered-data-main/covered-data-main.component.css","webpack:///./src/app/covered-data-main/covered-data-main.component.html","webpack:///./src/app/covered-data-main/covered-data-main.component.ts","webpack:///./src/app/cwwed.service.ts","webpack:///./src/app/main/main.component.css","webpack:///./src/app/main/main.component.html","webpack:///./src/app/main/main.component.ts","webpack:///./src/app/page-not-found/page-not-found.component.css","webpack:///./src/app/page-not-found/page-not-found.component.html","webpack:///./src/app/page-not-found/page-not-found.component.ts","webpack:///./src/app/psa/psa.component.css","webpack:///./src/app/psa/psa.component.html","webpack:///./src/app/psa/psa.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<header class=\\\"py-3\\\">\\n  <div class=\\\"row flex-nowrap justify-content-between align-items-center\\\">\\n    <div class=\\\"col-12 col-md-8\\\">\\n      <img class=\\\"img-fluid\\\" src=\\\"assets/header.png\\\" />\\n    </div>\\n    <div class=\\\"col-md-4 text-right\\\">\\n      <img class=\\\"img-fluid\\\" src=\\\"assets/header_doc.png\\\" />\\n    </div>\\n  </div>\\n  <div class=\\\"row border-bottom m-0\\\"></div>\\n  <nav class=\\\"navbar navbar-expand-lg navbar-light bg-light\\\">\\n    <a class=\\\"navbar-brand\\\" routerLink=\\\"\\\">CWWED</a>\\n    <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" (click)=\\\"toggleNavCollapse()\\\" aria-controls=\\\"navbarNav\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\n      <span class=\\\"navbar-toggler-icon\\\"></span>\\n    </button>\\n    <div class=\\\"collapse navbar-collapse\\\" [ngbCollapse]=\\\"!isNavCollapsed\\\">\\n      <ul class=\\\"navbar-nav\\\">\\n        <li class=\\\"nav-item\\\">\\n          <a class=\\\"nav-link\\\" routerLink=\\\"coastal-act\\\" routerLinkActive=\\\"active\\\" (click)=\\\"navCollapse()\\\">COASTAL Act</a>\\n        </li>\\n        <li class=\\\"nav-item\\\">\\n          <a class=\\\"nav-link\\\" routerLink=\\\"coastal-act-projects\\\" routerLinkActive=\\\"active\\\" (click)=\\\"navCollapse()\\\">COASTAL Act Projects</a>\\n        </li>\\n        <li class=\\\"nav-item\\\">\\n          <a class=\\\"nav-link\\\" routerLink=\\\"covered-data\\\" routerLinkActive=\\\"active\\\" (click)=\\\"navCollapse()\\\">Covered Data</a>\\n        </li>\\n        <li class=\\\"nav-item\\\">\\n          <a class=\\\"nav-link\\\" routerLink=\\\"post-storm-assessment\\\" routerLinkActive=\\\"active\\\" (click)=\\\"navCollapse()\\\">Post Storm Assessment</a>\\n        </li>\\n      </ul>\\n    </div>\\n  </nav>\\n</header>\\n\\n<ngx-spinner size=\\\"large\\\"></ngx-spinner>\\n\\n<div>\\n  <router-outlet *ngIf=\\\"isLoaded\\\"></router-outlet>\\n</div>\\n\\n<footer class=\\\"pt-4 my-md-5 pt-md-5 border-top\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-12 col-md\\\">\\n      <img class=\\\"mb-2\\\" src=\\\"assets/noaa-logo.svg\\\" alt=\\\"\\\" width=\\\"24\\\" height=\\\"24\\\">\\n      <small class=\\\"d-block mb-3 text-muted\\\">CWWED</small>\\n    </div>\\n    <div class=\\\"col-6 col-md\\\">\\n      <h5>About</h5>\\n      <ul class=\\\"list-unstyled text-small\\\">\\n        <li><a class=\\\"text-muted\\\" routerLink=\\\"home\\\">CWWED</a></li>\\n        <li><a class=\\\"text-muted\\\" routerLink=\\\"coastal-act\\\">The COASTAL Act</a></li>\\n        <li><a class=\\\"text-muted\\\" routerLink=\\\"coastal-act-projects\\\">COASTAL Act Projects</a></li>\\n      </ul>\\n    </div>\\n    <div class=\\\"col-6 col-md\\\">\\n      <h5>Features</h5>\\n      <ul class=\\\"list-unstyled text-small\\\">\\n        <li><a class=\\\"text-muted\\\" routerLink=\\\"covered-data\\\">Covered Data</a></li>\\n        <li><a class=\\\"text-muted\\\" routerLink=\\\"post-storm-assessment\\\">Post Storm Assessment</a></li>\\n      </ul>\\n    </div>\\n  </div>\\n</footer>\\n\"","module.exports = \"nav .navbar-nav .nav-link.active {\\n  text-decoration: underline; }\\n\"","import { NgxSpinnerService } from \"ngx-spinner\";\nimport { Component, OnInit } from '@angular/core';\nimport { forkJoin } from \"rxjs\";\nimport { CwwedService } from \"./cwwed.service\";\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  public isLoaded: boolean = false;\n  public isNavCollapsed: boolean = false;\n\n  constructor(\n    private cwwedService: CwwedService,\n    private spinner: NgxSpinnerService,\n  ) {\n  }\n\n  public navCollapse() {\n    this.isNavCollapsed = false;\n  }\n\n  public toggleNavCollapse() {\n    this.isNavCollapsed = !this.isNavCollapsed;\n  }\n\n  ngOnInit() {\n    // show loading animation until the core data has been loaded\n    this.spinner.show();\n    forkJoin(\n      this.cwwedService.fetchCoveredData(),\n      this.cwwedService.fetchNamedStorms(),\n      this.cwwedService.fetchNSEMPerStorm(),\n      this.cwwedService.fetchCoastalActProjects(),\n    ).subscribe(() => {\n      this.isLoaded = true;\n      this.spinner.hide();\n    });\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgModule} from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule, Routes} from \"@angular/router\";\nimport { NgxSpinnerModule } from 'ngx-spinner';\nimport { LeafletModule } from '@asymmetrik/ngx-leaflet';\n\nimport { AppComponent } from './app.component';\nimport { CoveredDataDetailComponent } from './covered-data-detail/covered-data-detail.component';\nimport { CoveredDataMainComponent } from './covered-data-main/covered-data-main.component';\nimport { PsaComponent } from './psa/psa.component';\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\nimport { MainComponent } from './main/main.component';\nimport { CoastalActComponent } from './coastal-act/coastal-act.component';\nimport { CoastalActProjectsComponent } from './coastal-act-projects/coastal-act-projects.component';\nimport { CoastalActProjectsDetailComponent } from './coastal-act-projects-detail/coastal-act-projects-detail.component';\n\nconst appRoutes: Routes = [\n  { path: '',   redirectTo: '/home', pathMatch: 'full' },\n  { path: 'home', component: MainComponent },\n  { path: 'coastal-act', component: CoastalActComponent },\n  {\n    path: 'coastal-act-projects',\n    component: CoastalActProjectsComponent,\n    children: [\n      { path: '', component: CoastalActProjectsDetailComponent },\n      { path: ':id', component: CoastalActProjectsDetailComponent },\n    ]\n  },\n  {\n    path: 'covered-data',\n    component: CoveredDataMainComponent,\n    children: [\n      { path: '', component: CoveredDataDetailComponent },\n      { path: ':id', component: CoveredDataDetailComponent },\n    ]\n  },\n  { path: 'covered-data/:id', component: CoveredDataMainComponent },\n  { path: 'post-storm-assessment', component: PsaComponent },\n  { path: 'post-storm-assessment/:id', component: PsaComponent },\n  { path: 'page-not-found', component: PageNotFoundComponent },\n  { path: '**', component: PageNotFoundComponent }\n];\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CoveredDataDetailComponent,\n    CoveredDataMainComponent,\n    PsaComponent,\n    PageNotFoundComponent,\n    MainComponent,\n    CoastalActComponent,\n    CoastalActProjectsComponent,\n    CoastalActProjectsDetailComponent,\n  ],\n  imports: [\n    RouterModule.forRoot(\n      appRoutes,\n      {\n        //enableTracing: true, // <-- debugging purposes only\n        useHash: true,\n      }\n    ),\n    BrowserModule,\n    BrowserAnimationsModule,\n    NgbModule,\n    HttpClientModule,\n    NgxSpinnerModule,\n    LeafletModule,\n  ],\n  entryComponents: [],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n  constructor() {\n  }\n}\n","module.exports = \"\"","module.exports = \"<div *ngIf=\\\"!project\\\">\\n  <h1>COASTAL Act Projects</h1>\\n  Please choose a COASTAL Act Project\\n</div>\\n<div *ngIf=\\\"project\\\">\\n  <div class=\\\"jumbotron\\\">\\n    <h1 class=\\\"display-4\\\">{{ project.name }}</h1>\\n    <hr class=\\\"my-4\\\">\\n    <p>\\n      {{ project.description }}\\n    </p>\\n    <div>\\n      <img [src]=\\\"project.image_url\\\" class=\\\"img-fluid\\\">\\n    </div>\\n  </div>\\n</div>\\n\"","import { ActivatedRoute } from \"@angular/router\";\nimport { Component, OnInit } from '@angular/core';\nimport { CwwedService } from \"../cwwed.service\";\nimport * as _ from 'lodash';\n\n@Component({\n  selector: 'app-coastal-act-projects-detail',\n  templateUrl: './coastal-act-projects-detail.component.html',\n  styleUrls: ['./coastal-act-projects-detail.component.css']\n})\nexport class CoastalActProjectsDetailComponent implements OnInit {\n  public project: any;\n\n  constructor(\n    private route: ActivatedRoute,\n    private cwwedService: CwwedService,\n  ) { }\n\n  ngOnInit() {\n\n    this.route.params.subscribe((data) => {\n      this.project = _.find(this.cwwedService.coastalActProjects, (project) => {\n        return project.id == data.id;\n      });\n    });\n  }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-4\\\">\\n      <nav class=\\\"navbar navbar-expand-md navbar-light\\\">\\n        <button class=\\\"navbar-toggler btn btn-block\\\" type=\\\"button\\\" (click)=\\\"toggleNavCollapse()\\\" aria-controls=\\\"navbarNav\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\n          <span class=\\\"oi oi-list\\\"></span>\\n          Projects\\n        </button>\\n        <div class=\\\"collapse navbar-collapse\\\" [ngbCollapse]=\\\"!isNavCollapsed\\\">\\n          <ul class=\\\"navbar-nav flex-column\\\">\\n            <a class=\\\"nav-link\\\" *ngFor=\\\"let project of coastalActProjects\\\" (click)=\\\"navCollapse()\\\" [routerLink]=\\\"[project.id]\\\" routerLinkActive=\\\"active\\\">{{ project.name }}</a>\\n          </ul>\\n        </div>\\n      </nav>\\n    </div>\\n    <div class=\\\"col-sm\\\">\\n      <router-outlet></router-outlet>\\n    </div>\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { CwwedService } from \"../cwwed.service\";\n\n@Component({\n  selector: 'app-coastal-act-projects',\n  templateUrl: './coastal-act-projects.component.html',\n  styleUrls: ['./coastal-act-projects.component.css']\n})\nexport class CoastalActProjectsComponent implements OnInit {\n\n  public isNavCollapsed: boolean = false;\n  public coastalActProjects: any [];\n\n  constructor(\n    private cwwedService: CwwedService,\n  ) {\n  }\n\n  ngOnInit() {\n    this.coastalActProjects = this.cwwedService.coastalActProjects;\n  }\n\n  public navCollapse() {\n    this.isNavCollapsed = false;\n  }\n\n  public toggleNavCollapse() {\n    this.isNavCollapsed = !this.isNavCollapsed;\n  }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"jumbotron\\\">\\n  <h1 class=\\\"display-4\\\">The COASTAL Act</h1>\\n  <p class=\\\"lead\\\">The Consumer Option for an Alternative System to Allocate Losses</p>\\n  <hr class=\\\"my-4\\\">\\n  <p>\\n    The Consumer Option for an Alternative System to Allocate Losses (COASTAL) Act was signed into law on July 6, 2012.  The purpose of the COASTAL Act is to lower costs to FEMA’s National Flood Insurance Program (NFIP) by better discerning wind versus water damage in the case of “indeterminate losses;” that is, where little tangible evidence beyond a building’s foundation (“slab”) remains for the proper adjustment of insurance claims for homes totally destroyed by a tropical cyclone.\\n\\n    The COASTAL Act requires NOAA to produce detailed “post-storm assessments” in the aftermath of a damaging tropical cyclone that strikes the U.S. or its territories.  Using output from a hindcast model (termed the “Named Storm Event Model” (NSEM) by the Act), the assessments will indicate the strength and timing of damaging winds and water at a given location in the area impacted by the tropical cyclone.  If the assessment results for the location of a specific “slab” case can be certified by NOAA as being greater than 90 percent accurate, those results will be input into a FEMA-managed formula that considers a variety of factors that may have contributed to structural damage.  Based on this formula, FEMA will determine the appropriate loss allocation between wind and water.\\n\\n    The Act further requires NOAA to create a “Coastal Wind and Water Event Database” (CWWED) to provide the public access to “covered data” (the observations collected during the storm to assist with the assessment).  The CWWED will serve as the portal through which the gridded post-storm assessment results and metadata will also be accessed by the public.\\n  </p>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-coastal-act',\n  templateUrl: './coastal-act.component.html',\n  styleUrls: ['./coastal-act.component.css']\n})\nexport class CoastalActComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div *ngIf=\\\"!data\\\">\\n  <h1>Covered Data</h1>\\n  Please choose a Covered Data\\n</div>\\n<div *ngIf=\\\"data\\\">\\n  <div class=\\\"card\\\">\\n    <h5 class=\\\"card-header\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md\\\">\\n           <a [href]=\\\"data.url\\\" target=\\\"_blank\\\"><span class=\\\"oi oi-document\\\"></span> Source</a>\\n        </div>\\n        <div class=\\\"col-md\\\">\\n          <div *ngFor=\\\"let provider of data.providers\\\">\\n            <a [href]=\\\"provider.url\\\" target=\\\"_blank\\\">\\n              <span class=\\\"oi oi-external-link\\\"></span> {{ provider.name }} Data\\n            </a>\\n          </div>\\n        </div>\\n        <div class=\\\"col-md\\\">\\n          <div ngbDropdown class=\\\"d-inline-block\\\">\\n            <button class=\\\"btn btn-outline-primary\\\" id=\\\"dropdownBasic1\\\" ngbDropdownToggle>Storm Snapshot</button>\\n            <div ngbDropdownMenu aria-labelledby=\\\"dropdownBasic1\\\">\\n              <div *ngFor=\\\"let storm of namedStorms\\\" class=\\\"dropdown-item\\\">\\n                <a [href]=\\\"stormCoveredDataUrl(storm)\\\" target=\\\"_blank\\\" *ngIf=\\\"stormCoveredDataUrl(storm)\\\">\\n                  <span class=\\\"oi oi-cloud-download\\\"></span>\\n                  <span class=\\\"pl-2\\\">{{ storm.name }}</span>\\n                </a>\\n                <span class=\\\"muted\\\" *ngIf=\\\"!stormCoveredDataUrl(storm)\\\">\\n                  <span class=\\\"oi oi-warning\\\"></span>\\n                  {{ storm.name }}\\n                </span>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </h5>\\n    <div class=\\\"card-body\\\">\\n      <h5 class=\\\"card-title\\\">\\n        {{ data.name }}\\n      </h5>\\n      <p class=\\\"card-text\\\">\\n        {{ data.description }}</p>\\n    </div>\\n  </div>\\n</div>\\n\"","import { ActivatedRoute } from \"@angular/router\";\nimport { Component, OnInit, Input } from '@angular/core';\nimport { CwwedService } from \"../cwwed.service\";\nimport * as _ from 'lodash';\n\n\n@Component({\n  selector: 'app-covered-data-detail',\n  templateUrl: './covered-data-detail.component.html',\n  styleUrls: ['./covered-data-detail.component.css']\n})\nexport class CoveredDataDetailComponent implements OnInit {\n  public data: any;\n  public namedStorms: any;\n  public nsemList: any;\n\n  constructor(\n    private cwwedService: CwwedService,\n    private route: ActivatedRoute,\n  ) {}\n\n  ngOnInit() {\n    this.namedStorms = this.cwwedService.namedStorms;\n    this.nsemList = this.cwwedService.nsemList;\n\n    this.route.params.subscribe((params) => {\n      this.data = _.find(this.cwwedService.coveredDataList, (data) => {\n        return data.id == params.id;\n      });\n    });\n  }\n\n  public stormCoveredDataUrl(storm) {\n    let foundNsem = _.find(this.nsemList, (nsem) => {\n      return nsem.named_storm === storm.id;\n    });\n    if (foundNsem && (this.data.id in foundNsem.thredds_url_covered_data)) {\n      return foundNsem.thredds_url_covered_data[this.data.id];\n    }\n    return '';\n  }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-4\\\">\\n      <nav class=\\\"navbar navbar-expand-md navbar-light\\\">\\n        <button class=\\\"navbar-toggler btn btn-block\\\" type=\\\"button\\\" (click)=\\\"toggleNavCollapse()\\\" aria-controls=\\\"navbarNav\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\n          <span class=\\\"oi oi-list\\\"></span>\\n          Covered Data\\n        </button>\\n        <div class=\\\"collapse navbar-collapse\\\" [ngbCollapse]=\\\"!isNavCollapsed\\\">\\n          <ul class=\\\"navbar-nav flex-column\\\">\\n            <a class=\\\"nav-link\\\" *ngFor=\\\"let data of coveredDataList\\\" (click)=\\\"navCollapse()\\\" [routerLink]=\\\"[data.id]\\\" routerLinkActive=\\\"active\\\">{{ data.name }}</a>\\n          </ul>\\n        </div>\\n      </nav>\\n    </div>\\n    <div class=\\\"col-sm\\\">\\n      <router-outlet></router-outlet>\\n    </div>\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { CwwedService } from \"../cwwed.service\";\n\n@Component({\n  selector: 'app-covered-data-main',\n  templateUrl: './covered-data-main.component.html',\n  styleUrls: ['./covered-data-main.component.css']\n})\nexport class CoveredDataMainComponent implements OnInit {\n  public coveredDataList: any;\n  public isNavCollapsed: boolean = false;\n\n  constructor(\n    private cwwedService: CwwedService,\n  ) {}\n\n  ngOnInit() {\n    this.coveredDataList = this.cwwedService.coveredDataList;\n  }\n\n  public toggleNavCollapse() {\n    this.isNavCollapsed = !this.isNavCollapsed;\n  }\n\n  public navCollapse() {\n    this.isNavCollapsed = false;\n  }\n}\n","import { HttpClient, HttpParams } from \"@angular/common/http\";\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../environments/environment';\n\nlet API_ROOT_DEV = 'http://localhost:8000/api';\nlet API_ROOT_PROD = 'https://dev.cwwed-staging.com/api';\nlet API_ROOT = environment.production ? API_ROOT_PROD : API_ROOT_DEV;\nlet API_COVERED_DATA = `${API_ROOT}/covered-data/`;\nlet API_NAMED_STORMS = `${API_ROOT}/named-storms/`;\nlet API_NSEM_PER_STORM = `${API_ROOT}/nsem/per-storm/`;\nlet API_COASTAL_ACT_PROJECTS = `${API_ROOT}/coastal-act-projects/`;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CwwedService {\n  coveredDataList: any;\n  namedStorms: any;\n  nsemList: any;\n  coastalActProjects: any;\n\n  constructor(\n    private http: HttpClient,\n  ) {}\n\n  public fetchNamedStorms() {\n    return this.http.get(API_NAMED_STORMS).pipe(\n      map((data) => {\n        this.namedStorms = data;\n        return this.namedStorms;\n      }),\n    );\n  }\n\n  public fetchNSEMPerStorm(params?) {\n    params = params ? params : {};\n\n    // build http params from supplied params\n    let options = { params: new HttpParams() };\n    for (let key in params) {\n      options.params.set(key, params[key]);\n    }\n\n    return this.http.get(API_NSEM_PER_STORM, options).pipe(\n      map((data) => {\n        this.nsemList = data;\n        return this.nsemList;\n      }),\n    );\n  }\n\n  public fetchCoveredData() {\n    return this.http.get(API_COVERED_DATA).pipe(\n      map((data) => {\n        this.coveredDataList = data;\n        return this.coveredDataList;\n      }),\n    );\n  }\n\n  public fetchCoastalActProjects() {\n    return this.http.get(API_COASTAL_ACT_PROJECTS).pipe(\n      map((data) => {\n        this.coastalActProjects = data;\n        return this.coastalActProjects;\n      }),\n    );\n  }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"jumbotron\\\">\\n  <h1 class=\\\"display-4\\\">CWWED</h1>\\n  <p class=\\\"lead\\\">Coastal Wind and Water Event Database</p>\\n  <hr class=\\\"my-4\\\">\\n  <p>\\n\\n    The CWWED will serve as an interactive database that provides access to all “Covered Data”, both by the Named Storm Event Model (NSEM) as well as relevant stakeholders, and serves as an accessible repository for the NSEM output so it can be referenced by FEMA and all relevant stakeholders. To ensure full interoperability with both Covered Data sources as well as the NSEM, it is critical that the CWWED be developed and configured concurrently with the development of the NSEM. In order to achieve this integrated functionality, several things must happen. First, the database structure itself must be developed as a federated database environment. It must then be populated by indexing all existing Covered Data sources and developing (Application Programming Interfaces (APIs) that facilitate the seamless and high-speed transfer, reformatting, and packaging of Covered Data from the data sources to the requestor (e.g., NSEM). As a “federated” database, the CWWED will not house any covered data itself, but rather will act as a virtual database, providing real-time access to covered data as though they were physically housed within the database itself. However, this may require the negotiation and implementation of data sharing agreements or service level agreements between NOAA and external Covered Data sources. The output from the NSEM, while also flowing through the CWWED, would be physically archived on servers at the NOAA National Centers for Environmental Information (NCEI), unless an alternative archival repository is identified for this purpose. When properly configured, this distinction is transparent to users. To ensure that the NSEM is able to request and retrieve all required covered data from the CWWED, and that the CWWED can, an API needs to be developed that intrinsically links the NSEM to the CWWED.\\n  </p>\\n  <div>\\n    <img src=\\\"assets/cwwed-diagram.png\\\" class=\\\"img-fluid\\\">\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.css']\n})\nexport class MainComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"alert alert-danger\\\">\\n  <h1>Page not found</h1>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-page-not-found',\n  templateUrl: './page-not-found.component.html',\n  styleUrls: ['./page-not-found.component.css']\n})\nexport class PageNotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"div[leaflet] {\\n  height: 65vh;\\n}\\n\"","module.exports = \"<div class=\\\"card\\\">\\n  <h5 class=\\\"card-header form-inline\\\">\\n    Post Storm Assessment\\n    <select class=\\\"form-control form-control-lg ml-3\\\">\\n      <option>Select a storm</option>\\n      <option *ngFor=\\\"let storm of namedStorms\\\">{{ storm.name }}</option>\\n    </select>\\n  </h5>\\n  <div class=\\\"card-body\\\">\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-sm-4\\\">\\n        <div class=\\\"list-group\\\">\\n          <div class=\\\"list-group-item list-group-item-primary\\\">\\n            <strong>Products</strong>\\n          </div>\\n          <li class=\\\"list-group-item list-group-item-action active\\\">\\n            Delaware Bay\\n          </li>\\n        </div>\\n      </div>\\n      <div class=\\\"col-sm\\\">\\n          <div class=\\\"d-flex justify-content-between align-items-center\\\">\\n            <h1>Delaware Bay</h1>\\n            <h6>\\n              <a target=\\\"_blank\\\" [href]=\\\"'https://dev.cwwed-staging.com/thredds/catalog/cwwed/Harvey/NSEM/v1/Post%20Storm%20Assessment/catalog.html?dataset=coveredDataDatasetScan/Harvey/NSEM/v1/Post%20Storm%20Assessment/delaware.nc'\\\" target=\\\"_blank\\\">\\n                <span class=\\\"oi oi-cloud-download\\\"></span>\\n                Data\\n              </a>\\n            </h6>\\n          </div>\\n          <div class=\\\"card-text\\\">\\n            This is the DFLow FM simulation on Delaware Bay and River domain. Dflow was forced with GFS winds during the spinup period and with HWRF winds during\\n            the simulation. The computational domain covers Delaware River and Bay up to the mouth of the Bay.\\n          </div>\\n        <div *ngIf=\\\"isLoaded\\\" leaflet [leafletOptions]=\\\"mapOptions\\\"></div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","import { ActivatedRoute } from \"@angular/router\";\nimport { Component, OnInit } from '@angular/core';\nimport { CwwedService } from \"../cwwed.service\";\nimport { geoJSON, GeoJSONOptions, latLng, tileLayer } from \"leaflet\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { GeoJsonObject } from \"geojson\";\n\nconst mbToken = 'pk.eyJ1IjoiZmxhY2thdHRhY2siLCJhIjoiY2l6dGQ2MXp0MDBwMzJ3czM3NGU5NGRsMCJ9.5zKo4ZGEfJFG5ph6QlaDrA';\nconst mbUrl = 'https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=' + mbToken;\n\n@Component({\n  selector: 'app-psa',\n  templateUrl: './psa.component.html',\n  styleUrls: ['./psa.component.css'],\n})\nexport class PsaComponent implements OnInit {\n  public nsemId: number;\n  public isLoaded: boolean = false;\n  public namedStorms: any;\n  public nsemList: any;\n  public mapOptions = {\n    layers: <any>[\n      //tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 18, attribution: '...' })\n      tileLayer(mbUrl, { id: 'mapbox.streets', maxZoom: 18, attribution: '...' })\n    ],\n    zoom: 8,\n    center: latLng(39.153332, -75.249730)\n  };\n\n  private _geoJsonOptions: GeoJSONOptions = {\n    onEachFeature: function (feature, layer) {\n      layer.bindPopup(\"Water Depth: \" + feature.properties.title + \"'\");\n    },\n    style: function (feature) {\n      return {\n        color: feature.properties.fill,\n        fillOpacity: .8\n      };\n    }\n  };\n\n  constructor(\n    private route: ActivatedRoute,\n    private cwwedService: CwwedService,\n    private http: HttpClient,\n  ) {}\n\n  ngOnInit() {\n    this.nsemList = this.cwwedService.nsemList;\n    this.namedStorms = this.cwwedService.namedStorms;\n\n    this.http.get('https://s3.amazonaws.com/cwwed-static-assets-frontend/contours.geojson').subscribe((data) => {\n      this.mapOptions.layers.push(geoJSON(<GeoJsonObject>data, this._geoJsonOptions));\n      this.isLoaded = true;\n    });\n\n    this.route.params.subscribe((data) => {\n      if (data.id) {\n        this.nsemId = parseInt(data.id);\n      }\n    });\n  }\n\n  public chooseStorm(storm: any) {\n    console.log(storm);\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, for easier debugging, you can ignore zone related error\n * stack frames such as `zone.run`/`zoneDelegate.invokeTask` by importing the\n * below file. Don't forget to comment it out in production mode\n * because it will have a performance impact when errors are thrown\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}